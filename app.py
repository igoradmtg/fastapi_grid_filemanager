import os
import gradio as gr
from fastapi import FastAPI, Request
from fastapi.responses import FileResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import shutil # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å shutil –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
# pip install fastapi uvicorn gradio
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
SAVE_DIR = "saved_files"
SENDED_DIR = "sended_files" # –ù–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

os.makedirs(SAVE_DIR, exist_ok=True)
os.makedirs(SENDED_DIR, exist_ok=True) # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ ---

def save_text_to_file(content, filename):
    file_path = os.path.join(SAVE_DIR, filename)
    try:
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(content)
        return f"‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: {filename}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"

def list_filenames():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –¥–ª—è Gradio Radio –∏–∑ SAVE_DIR."""
    try:
        files = [f for f in os.listdir(SAVE_DIR) if os.path.isfile(os.path.join(SAVE_DIR, f))]
        return files
    except Exception as e:
        return [] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

def delete_file(filename):
    file_path = os.path.join(SAVE_DIR, filename)
    if os.path.exists(file_path):
        try:
            os.remove(file_path)
            return f"üóëÔ∏è –§–∞–π–ª '{filename}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{filename}': {str(e)}"
    else:
        return f"‚ö†Ô∏è –§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω."

def read_file_content(filename):
    file_path = os.path.join(SAVE_DIR, filename)
    if os.path.exists(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read()
            return content
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{filename}': {str(e)}"
    else:
        return f"‚ö†Ô∏è –§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω."

# --- –°–æ–∑–¥–∞—ë–º FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/get-file/{filename}")
async def get_file_fastapi(filename: str):
    file_path = os.path.join(SAVE_DIR, filename)
    
    if not os.path.exists(file_path):
        return JSONResponse(content={"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status_code=404)
    
    try:
        response = FileResponse(file_path, filename=filename)
        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ –≤ SENDED_DIR
        @response.background
        async def move_file_after_send():
            destination_path = os.path.join(SENDED_DIR, filename)
            try:
                shutil.move(file_path, destination_path)
                print(f"–§–∞–π–ª '{filename}' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ '{SENDED_DIR}' –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{filename}' –≤ '{SENDED_DIR}': {str(e)}")
        
        return response
    except Exception as e:
        return JSONResponse(content={"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"}, status_code=500)


@app.post("/upload-file-from-body")
async def upload_file_from_body(request: Request):
    try:
        data = await request.json()
        content = data.get("body")
        filename = data.get("filename")

        if not content or not filename:
            return JSONResponse(content={"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç 'body' –∏–ª–∏ 'filename' –≤ –∑–∞–ø—Ä–æ—Å–µ."}, status_code=400)

        file_path = os.path.join(SAVE_DIR, filename)
        with open(file_path, "w", encoding="utf-            8") as f:
            f.write(content)
        return JSONResponse(content={"message": f"–§–∞–π–ª '{filename}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω."}, status_code=200)
    except Exception as e:
        return JSONResponse(content={"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"}, status_code=500)

@app.get("/get-first-file/")
async def get_first_file():
    try:
        files = [f for f in os.listdir(SAVE_DIR) if os.path.isfile(os.path.join(SAVE_DIR, f))]
        if not files:
            return JSONResponse(content={"error": "–í –∫–∞—Ç–∞–ª–æ–≥–µ 'saved_files' –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤."}, status_code=404)
        
        first_filename = files[0]
        file_path = os.path.join(SAVE_DIR, first_filename)
        
        try:
            response = FileResponse(file_path, filename=first_filename)
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ –≤ SENDED_DIR
            @response.background
            async def move_first_file_after_send():
                destination_path = os.path.join(SENDED_DIR, first_filename)
                try:
                    shutil.move(file_path, destination_path)
                    print(f"–§–∞–π–ª '{first_filename}' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ '{SENDED_DIR}' –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{first_filename}' –≤ '{SENDED_DIR}': {str(e)}")
            
            return response
        except Exception as e:
            return JSONResponse(content={"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}"}, status_code=500)
    except Exception as e:
        return JSONResponse(content={"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}"}, status_code=500)

# --- Gradio-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---

text_save_interface = gr.Interface(
    fn=save_text_to_file,
    inputs=[
        gr.Textbox(label="–¢–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", lines=5),
        gr.Textbox(label="–ò–º—è —Ñ–∞–π–ª–∞", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: example.txt")
    ],
    outputs=gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"),
    title="–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª",
    description="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –∏–º—è —Ñ–∞–π–ª–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ 'Submit' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
    examples=[["–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞", "example.txt"]]
)

with gr.Blocks() as file_manager_interface:
    gr.Markdown("### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º gr.Radio –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    # –í–∞–∂–Ω–æ: list_filenames() –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
    file_selector = gr.Radio(
        list_filenames(), # –û–ø—Ü–∏–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        label="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:",
        interactive=True,
        scale=1
    )
    
    refresh_button = gr.Button("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤", scale=0) # –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
    selected_filename_input = gr.Textbox(
        label="–ò–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞", 
        placeholder="–ò–º—è —Ñ–∞–π–ª–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞", 
        interactive=True # –°–¥–µ–ª–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é
    )

    with gr.Row():
        delete_button = gr.Button("–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª")
        view_button = gr.Button("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")

    operation_result_output = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏", interactive=False, lines=5)

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤ gr.Radio –∫ –ø–æ–ª—é selected_filename_input
    file_selector.change(
        lambda x: x, # –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∞
        inputs=file_selector,
        outputs=selected_filename_input
    )

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º refresh_button –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ gr.Radio
    refresh_button.click(
        lambda: gr.update(choices=list_filenames(), value=None), # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        inputs=None,
        outputs=file_selector
    ).then(
        lambda: "", # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
        inputs=None,
        outputs=selected_filename_input
    )

    # –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ –£–¥–∞–ª–∏—Ç—å –∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    delete_button.click(
        delete_file,
        inputs=selected_filename_input,
        outputs=operation_result_output
    ).then(
        lambda: gr.update(choices=list_filenames(), value=None), # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ Radio
        inputs=None,
        outputs=file_selector
    ).then(
        lambda: "", # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        inputs=None,
        outputs=selected_filename_input
    )

    view_button.click(read_file_content, inputs=selected_filename_input, outputs=operation_result_output)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    file_manager_interface.load(
        lambda: gr.update(choices=list_filenames()),
        inputs=None,
        outputs=file_selector
    )


full_interface = gr.TabbedInterface(
    [text_save_interface, file_manager_interface],
    ["–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏"]
)

app = gr.mount_gradio_app(app, full_interface, path="/")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=7860)
